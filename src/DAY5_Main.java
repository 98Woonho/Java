import java.util.ArrayList;

public class DAY5_Main {
    public static void main(String[] args) {
        /**
         * 반복문 : 주어진 구문을 주어진 조건이 참인 동안에 반복해서 실행한다.
         *
         * 자료형 >> Array : 배열(일자로 변수를 여러 개, 한번에 선언)
         * 자료형 >> ArrayList : 목록형(중복 가능, 배열같은 목록형)
         * 자료형 >> List : 목록형(중복 가능, 목록)
         * 자료형 >> Set : 목록형(중복 불가)
         * 자료형 >> Map : 테이블형(Key-Value)
         *
         * >> 조건식 : 참(true) 또는 거짓(false)으로 결과물이 나오는 모든 명령 구문
         * >> 횟수조건식 : 길이나 갯수, 횟수 등을 측정해서 조건식으로 나오는 것, 예를 들어, x < array.length
         * >> 증감식 : 특정 값이 증가하거나 감소하거나 할 수 있도록 만들어지는 산술식
         *
         * - while : 조건이 "참"인동안 반복실행
         * // ~동안  ( 조건식 )   {} 를 반복 실행한다.
         * while ( /// 조건식 /// ) {
         *     /// 실행할 코드 ///
         * }
         *
         * - do-while : 무조건 1회 실행, 조건이 참인동안 반복실행
         * // ~한다.  {} 를 실행   ~동안   ( 조건식 )   {} 를 반복 실행한다.
         * do {
         *     /// 실행할 코드 ///
         * } while( /// 조건식 ///  );
         *
         * - for : 주어진 횟수만큼 반복실행
         * // 초기화  선언한다.  횟수조건식이 참인동안   {}를 반복실행한다.   증감하며...
         * for(
         *     /// 초기화 /// ;
         *     /// 횟수조건식 /// ;
         *     /// 증감식 ///
         * ) {
         *     /// 실행할 코드 ///
         * }
         */

        // new int[] 이렇게 하면, 초기화에 주어진 갯수만큼 자동으로 갯수 정의됨
        int[] intArr = new int[] { 1,2,3,4 };

        int idx = 0;
        boolean trueOrfalse = true;
        // 1. 시작 값은 true로 만들어질 수 있도록 해줘야함
        // 2. 이후에는 특정조건에 따라서 반복적 실행하도록 조건 구성해야 함
        //
        // 일반적으로 많이 사용하는 형태 : 시기(이벤트 발생)
        //    >> 변수에 값이 null이 아닐 때까지
        //    >> 특정한 값이 찾아질 때까지
        while(trueOrfalse && idx < intArr.length) {
            if(intArr[idx] == 2) {
                trueOrfalse = false;
            }
            // ++x / --x (선행/prefix) : +1 또는 -1 을 먼저 연산한 후 해당행을 실행한다.
            // x++ / x-- (후행/postfix) : 해당행을 실행한 후 +1 또는 -1 을 연산한다.
            // 만약, idx == 0 이라면,
            // int x = intArr[ idx++ ]; // 0번째를 가져온 후 idx+=1
            // int x = intArr[ ++idx ]; // idx+=1 을 연산한 후 1번째를 가져옴
            //
            //     >> 배열의 인덱스 위치에는 상수 뿐만 아니라, 산술식도 가능
            //        int a = intArr[ idx+=3 ]; // 이렇게 쓰는 사람은 0.0001% 도 없음
            idx++; // ==  idx +=1  ==  idx=idx+1
        }

        // 한 번 실행하고나서, 결과물 관찰해서 무언가를 할 때
//        do {
//
//        } while();

        // 외부에 선언변수, for문 초기화 단계에서 선언된 변수 차이
        //     >> 전역이냐? 지역이냐? 를 확인하려면 그 !!! 구문 기준 !!! 으로 봐야함
        //
        // 전역 변수(Global Variable) : 지역 위치에 영향 줌
        // 지역 변수(Local Variable) : 전역 위치에 영향 못 줌

        // 전역 위치
        int z = 5;//외부에서 선언해서, for문 초기화 단계에서 초기화하여 사용하기도 함
        for(
            // 지역 위치
            // 초기화 자리에서는 정수를 대부분 사용
            int x = 3, y = 4;//, float a = 5;//타입이 달라지면 안됨, 같은 타입으로 여러 개 선언 가능
            x < 10;
            x++
        ) {
            // 지역 위치
            /* ... */
        }
        
        // 불가능
        //x = 5;
        
        // 가능
        for(int x = 4; x < 5; x++) { }
        
        // 초기화 단계에서 선언되는 변수는 카운터(Counter)로 사용됨
        for(int i = 0; i < intArr.length; i++) {
            int element = intArr[i];//i가 위치 값 결정, i는 카운팅(숫자 순서대로 세기)
            System.out.println(element);
        }

        // 관례적인 카운터의 이름
        //
        // i, j, k, 각자 알아서...
        // 중첩 반복 시 이름
        // 중첩 반복은 성능에 영향 많이 줌 => 느리게 만드는 요소...
//        for(int i ~~~ ) {
//            for(int j ~~~ ) { i가 1번 돌때마다 j번만큼 실행
//                for( int k ~~~ ) { i가 1번 돌때마다 j번만큼 도는데, j가 1번 돌때마다 k번만큼 실행
//
//                }
//            }
//        }

        // 반복? 규칙이 있음
        // 반복문 잘 작성하는 방법 : 규칙 발견

        // 구구단 출력(9단까지출력) >> 횟수가 정해져있음 >> for문이 더 적합
        //
        // 2x1  3x1  4x1  ...
        // 2x2  3x2  4x2  ...
        // ...  ...  ...  ...

        // --> +1
        // |   2x1  3x1  4x1  5x1  6x1  7x1  8x1  9x1
        // +1  2x2  3x2  4x2  5x2  6x2  7x2  8x2  9x2
        //     2x3  3x3  4x3  5x3  6x3  7x3  8x3  9x3
        //     2x4  3x4  4x4  5x4  6x4  7x4  8x4  9x4
        //     2x5  3x5  4x5  5x5  6x5  7x5  8x5  9x5
        //
        // i가 1번 돌 때, j가 n번만큼 돈다.
        // i가 그 행에 고정, j가 n번만큼 실행한다.
        for(int i = 1; i <= 9; i++) {
            for(int j = 2; j <= 9; j++) {
                // System.out.print  : 개행없이 출력
                System.out.print(
                    j + "x" + i + " "
                );
            }
            // 개행만 수행
            System.out.println();
        }

        ArrayList<String> list = new ArrayList<String>();
        // 동일구문(단, 차이점은 index, 값 모두 가져옴)
        // for( int i = 0; i < list.size(); i++ ) {
        //     String s = list.get(i);
        // }
        // (값만 가져옴)
        for (final String s : list) { // foreach 구문 : 요소의 값을 하나씩 차례로 가져옴
            /// 실행할 코드
        }
        // 함수형 프로그래밍에서는...
        // list.forEach((element){ ... });
    }
}
